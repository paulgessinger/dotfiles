# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
	. /etc/bashrc
fi

# User specific aliases and functions



#export PYTHONPATH=~/python_utils:$PYTHONPATH
#export PATH=~/python_utils:$PATH

# added by Miniconda2 4.1.11 installer
#export PATH="/afs/cern.ch/user/p/pagessin/miniconda2/bin:$PATH"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

###
# User specific aliases and functions
###
export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'

## LANGUAGE
export LC_ALL=en_US.UTF8
export LANG=en_US.UTF8


function setupxAOD {
        export WORKSPACE_PATH="$HOME/workspace_xAOD"
        export WRK=$WORKSPACE_PATH
        source ${WORKSPACE_PATH}/BaseTools/scripts/setEnv.sh
        source ${WORKSPACE_PATH}/rcSetup.sh
}
export setupxAOD

function mysetup {
        setupATLAS
        setupxAOD

        echo "Setting XAOD_ACCESSTRACER_FRACTION=0"
        export XAOD_ACCESSTRACER_FRACTION=0

        cd $WORKSPACE_PATH
}
export mysetup

function golimits {
        cd ~/workspace_xAOD/WPrimeBAT/limits
        source setup.sh
        setupSoftware
}


function gorucio {
	setupATLAS
	lsetup rucio
	voms-proxy-init -voms atlas
        setupSoftware
}
export gorucio


export RUCIO_ACCOUNT=$CERN_USER

alias wrk='cd $WORKSPACE_PATH'
alias kng='cd `kong cd`'

alias vi='vim'

function bi {
        p=`bjobs -w|grep PEND|wc -l`
        r=`bjobs -w|grep RUN|wc -l`
        printf "TOTAL: $((p+r))\n"
        printf "PEND: ${p}\n"
        echo "RUN: ${r}"
#printf "PEND: "; bjobs -w|gre,p PEND|wc -l;printf "RUN:  ";bjobs -w|grep RUN|wc -l
}
export bi

alias naut='nautilus . --no-desktop --browser > /dev/null 2>&1 &'

# add .local/bin to path
export PATH=~/.local/bin:$PATH
export PATH=~/.local/default/bin:$PATH
export LD_LIBRARY_PATH=~/.local/default/lib:$LD_LIBRARY_PATH
export PATH="/opt/cmake-3.19/bin:$PATH"
        
if [[ $HOSTNAME = *"atpc002"*  ]]; then 
export HOSTNAME=atpc002.cern.ch
fi

if [[ $HOSTNAME = *"acts-dev-rd-et"*  ]]; then 
export HOSTNAME=acts-dev-rd-et.cern.ch
fi

export CCACHE_DIR=/tmp/$USER/ccache
export CCACHE_MAXSIZE=20G
mkdir -p $CCACHE_DIR

if [[ $HOSTNAME = *"lxplus"*  ]]; then 
  export PATH=~/.local/lxplus/bin:$PATH
  # export HISTFILE="$HOME/.bash_histories/lxplus"
  export LD_LIBRARY_PATH=~/.local/lxplus/lib:$LD_LIBRARY_PATH
else
  export LD_LIBRARY_PATH=~/.local/$HOSTNAME/lib:$LD_LIBRARY_PATH
  # export HISTFILE="$HOME/.bash_histories/$HOSTNAME"
  export PATH=~/.local/$HOSTNAME/bin:$PATH
fi
# shopt -s histappend
# export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"



function godev {
  cd $(readlink -e ~/devlinks/$HOSTNAME)
}
export godev

#alias bell='echo -en "\007"'

function bell {
  pushover.sh "bell: $HOSTNAME: $1"
}
export bell

#alias bell="pushover.sh \"bell: $HOSTNAME\""
alias htop="htop -d 50"

export BOOST_TEST_COLOR_OUTPUT="yes"

alias lcgenv="/cvmfs/sft.cern.ch/lcg/releases/lcgenv/1.3.8-df655/x86_64-slc6-gcc8-opt/lcgenv -p /cvmfs/sft.cern.ch/lcg/releases/"


function saveDiplay {
  echo $DISPLAY > ~/.display
}
export saveDisplay

function loadDisplay {
  export DISPLAY=$(cat ~/.display)
}
export saveDisplay


export THEME_MODE=dark

n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, either remove the "export" as in:
    #    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    #    (or, to a custom path: NNN_TMPFILE=/tmp/.lastd)
    # or, export NNN_TMPFILE after nnn invocation
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}
